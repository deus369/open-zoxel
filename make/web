# ==== ===== ==== #
# ===== web ===== #
# ==== ===== ==== #

cc_web = build/emsdk/upstream/emscripten/emcc
emrun=build/emsdk/upstream/emscripten/emrun
emsdk=python3 build/emsdk/emsdk.py
target_web_dir = build/web
target_web = $(target_web_dir)/zoxel.html # .js
web_wasm_file = $(target_web_dir)/zoxel.wasm
web_data_file = $(target_web_dir)/zoxel.data
make_web_checks= [ ! -d $(target_web_dir) ] && mkdir -p $(target_web_dir); \
[ ! -d $(target_web_dir)/resources ] && cp -R $(resources_dir) $(target_web_dir)/resources;
web_resources_dir = -Dresources_dir_name="\"resources\""
cflags_web = --preload-file $(resources_dir) -s WASM=1 -s FULL_ES3=1 -s USE_WEBGL2=1 -s MIN_WEBGL_VERSION=2 -s MAX_WEBGL_VERSION=2 -s ALLOW_MEMORY_GROWTH -s STACK_SIZE=365536 -s EXPORTED_FUNCTIONS=['_main','_ntohs']
ldlibs_web = -lGL -lGLEW -lSDL -s USE_SDL=2 -s USE_SDL_IMAGE=2 -s SDL2_IMAGE_FORMATS='["png"]' -s USE_SDL_MIXER=2
make_web = $(make_web_checks) $(emsdk) construct_env && $(cc_web) $(cflags) $(cflags_web) $(web_resources_dir) -o $(target_web) $(OBJS) include/flecs/flecs.c $(ldlibs_web) && bash bash/web/post_build.sh

prepare-web:
	@ bash bash/web/prepare.sh

$(target_web): $(SRCS)
	@ echo " > building zoxel-web"
	@ $(patient_cmd)
	@ $(make_web)

web:
	@ echo " > building zoxel-web"
	@ $(patient_cmd)
	@ $(make_web)

# Runs zoxel web release build
run-web:
	$(emrun) $(target_web)

# ~/projects/emsdk/upstream/emscripten/emrun --browser firefox zoxel.html

# todo: download zoxel-play for web live on git

# updates the zoxel-play project
update-web:
	@ bash bash/web/update_zoxel_play.sh

# updates the zoxel-play project
run-zoxel-play:
	@ bash bash/web/run_zoxel_play.sh

# updates the zoxel-play project
git-push-zoxel-play:
	@ echo " > pushing from projects/zoxel-play"
	@ cd ../zoxel-play && bash/git/git_push.sh

help:
	@echo "  > [web]"
	@echo "    prepare-web	installs tools for web build"
	@echo "    web		builds web [ $(target_web)]"
	@echo "    run-web	runs web"
